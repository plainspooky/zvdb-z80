# file opened: zvdb_msx.asm
  1   0000              ; zvdb-z80 MSX-DOS version
  2   0000              ; Minimal Z80 implementation of ZVDB for MSX systems
  3   0000              ;
  4   0000              ; It runs in any MSX2, MSX2+ or MSX turbo R machine or a MSX1 using any
  5   0000              ; 80 columns card installed (set the 80 columns mode first).
  6   0000              ;
  7   0000              ; Uses 1-bit quantization and random hyperplane indexing
  8   0000
  9   0000              ; CP/M system calls (MSX-DOS shares same system calls)
 10   0000              BDOS            EQU     5       ; BDOS entry point
 11   0000              BOOT            EQU     0       ; Warm boot
 12   0000              C_READ          EQU     1       ; Console input
 13   0000              C_WRITE         EQU     2       ; Console output
 14   0000              C_KEY           EQU     6       ; Get key
 15   0000              C_PRINT         EQU     9       ; Print string
 16   0000              C_READSTR       EQU     10      ; Buffered console input
 17   0000              F_OPEN          EQU     15      ; Open file
 18   0000              F_CLOSE         EQU     16      ; Close file
 19   0000              F_READ          EQU     20      ; Read sequential
 20   0000              F_WRITE         EQU     21      ; Write sequential
 21   0000              F_MAKE          EQU     22      ; Make file
 22   0000              F_DELETE        EQU     19      ; Delete file
 23   0000              DMA             EQU     26      ; Set DMA address
 24   0000
 25   0000              ; CP/M memory layout
 26   0000              TPA             EQU     #0100   ; Transient Program Area start
 27   0000              BDOS_ENTRY      EQU     #0005   ; BDOS entry point
 28   0000              FCB             EQU     #005C   ; Default FCB
 29   0000              FCB2            EQU     #006C   ; Second FCB
 30   0000              DMA_BUF         EQU     #0080   ; Default DMA buffer
 31   0000
 32   0000              ; Constants
 33   0000              VECTOR_BITS     EQU     256     ; Bits per vector
 34   0000              VECTOR_BYTES    EQU     32      ; Bytes per vector (256/8)
 35   0000              MAX_VECTORS     EQU     128     ; Maximum vectors (reduced for CP/M)
 36   0000              HASH_BITS       EQU     7       ; Bits for hash (128 buckets)
 37   0000              HYPERPLANES     EQU     8       ; Number of hyperplanes for hashing
 38   0000
 39   0000              ; MSX system calls
 40   0000              CALSLT          EQU     #001C   ; Call a routine in any slot
 41   0000              CHGCLR          EQU     #0062   ; Change Colors
 42   0000              CHGET           EQU     #009F   ; Character Get
 43   0000              CHPUT           EQU     #00A2   ; Character Put
 44   0000              CLS             EQU     #00C3   ; Clear Screen
 45   0000              INITXT          EQU     #006C   ; Change to 40/80 column text mode
 46   0000
 47   0000              ; MSX system variables
 48   0000              LINL40          EQU     #F3AE   ; Screen width for SCREEN 0
 49   0000              EXPTBL          EQU     #FCC1   ; Expanded slots table
 50   0000              PUTPNT          EQU     #F3F8   ; Address to put a char in keyboard buffer
 51   0000              GETPNT          EQU     #F3FA   ; Address to get a char in keyboard buffer
 52   0000              CSRY            EQU     #F3DC   ; Cursor position Y
 53   0000              CSRX            EQU     #F3DD   ; Cursor position X
 54   0000
 55   0000                      ORG     TPA
 56   0100
 57   0100              start:
 58   0100 CD 30 01             CALL    check_80_columns
 59   0103
 60   0103              skip:
 61   0103                      ; Print welcome message
 62   0103 11 1B 01             LD      DE,welcome_msg
 63   0106 CD 6B 01             CALL    print_str
 64   0109
 65   0109 CD 9F 01             CALL    init_db         ; Initialize database
 66   010C CD E3 01             CALL    demo_ui         ; Run demo with UI
 67   010F
 68   010F 06 01                LD      B,0 + 1
 69   0111 0E 16                LD      C,21 + 1
 70   0113 CD 90 01             CALL    set_cursor_xy   ; Set cursor in the bottom of screen
 71   0116
 72   0116              back_to_dos:
 73   0116                      ; Back to MSX-DOS
 74   0116 0E 00                LD      C,0
 75   0118 C3 05 00             JP      BDOS            ; Warm boot (safer)
 76   011B
 77   011B              welcome_msg:
 78   011B 5A 56 44 42          DEFM    "ZVDB-Z80 MSX Edition",0
 78   011F 2D 5A 38 30
 78   0123 20 4D 53 58
 78   0127 20 45 64 69
 78   012B 74 69 6F 6E
 78   012F 00
 79   0130
 80   0130              ; Check if MSX is 80 column text mode
 81   0130              check_80_columns:
 82   0130 3A AE F3             LD      A,(LINL40)
 83   0133 FE 50                CP      80
 84   0135 C8                   RET     Z
 85   0136
 86   0136 11 3F 01             LD      DE,.width_80_msg
 87   0139 CD 6B 01             CALL    print_str
 88   013C C3 16 01             JP      back_to_dos
 89   013F
 90   013F              .width_80_msg:
 91   013F 43 68 61 6E          DEFM    "Change to 80 columns first!",13,10,0
 91   0143 67 65 20 74
 91   0147 6F 20 38 30
 91   014B 20 63 6F 6C
 91   014F 75 6D 6E 73
 91   0153 20 66 69 72
 91   0157 73 74 21 0D
 91   015B 0A 00
 92   015D
 93   015D              ; Call ROM routines
 94   015D              call_slot:
 95   015D FD 2A C0 FC          LD      IY,(EXPTBL-1)   ; Where the ROM lives :)
 96   0161 C3 1C 00             JP      CALSLT
 97   0164
 98   0164              ; Print character
 99   0164              print_char:
100   0164 DD 21 A2 00          LD      IX,CHPUT
101   0168 C3 5D 01             JP      call_slot
102   016B
103   016B              ; Print string
104   016B              print_str:
105   016B 1A                   LD      A,(DE)
106   016C FE 00                CP      0
107   016E C8                   RET     Z
108   016F CD 64 01             CALL    print_char
109   0172 13                   INC     DE
110   0173 18 F6                JR      print_str
111   0175
112   0175              ; Get a key without block console
113   0175              check_key:
114   0175 2A F8 F3             LD      HL,(PUTPNT)
115   0178 ED 5B FA F3          LD      DE,(GETPNT)
116   017C ED 52                SBC     HL,DE
117   017E AF                   XOR     A
118   017F B4                   OR      H
119   0180 B5                   OR      L
120   0181 FE 00                CP      0
121   0183 C8                   RET     Z
122   0184
123   0184 DD 21 9F 00          LD      IX,CHGET
124   0188 C3 5D 01             JP      call_slot
125   018B
126   018B              ; Clear screen
127   018B              clear_screen:
128   018B                      ; Just because use CLS routine doesn't not work :/
129   018B                      ; LD      IX,CLS
130   018B                      ; CALL    call_slot
131   018B 3E 0C                LD      A,12
132   018D C3 64 01             JP      print_char
133   0190
134   0190              ; Set cursor position
135   0190              set_cursor_xy:
136   0190 F5                   PUSH    AF
137   0191 C5                   PUSH    BC
138   0192
139   0192 04                   INC     B
140   0193 0C                   INC     C
141   0194
142   0194 79                   LD      A,C
143   0195 32 DC F3             LD      (CSRY),A
144   0198 78                   LD      A,B
145   0199 32 DD F3             LD      (CSRX),A
146   019C
147   019C C1                   POP     BC
148   019D F1                   POP     AF
149   019E C9                   RET
150   019F
151   019F              ; Initialize database
152   019F              init_db:
153   019F AF                   XOR     A
154   01A0 32 DA 05             LD      (vector_count),A
155   01A3
156   01A3                      ; Clear hash index
157   01A3 21 75 16             LD      HL,hash_index
158   01A6 11 76 16             LD      DE,hash_index+1
159   01A9 01 FF 00             LD      BC,128*2-1      ; Reduced for CP/M
160   01AC 36 00                LD      (HL),0
161   01AE ED B0                LDIR
162   01B0
163   01B0                      ; Initialize random hyperplanes
164   01B0 21 75 17             LD      HL,hyperplanes
165   01B3 01 00 01             LD      BC,HYPERPLANES * VECTOR_BYTES
166   01B6 3E 55                LD      A,#55
167   01B8              .init_hyper:
168   01B8 77                   LD      (HL),A
169   01B9 23                   INC     HL
170   01BA 0B                   DEC     BC
171   01BB 78                   LD      A,B
172   01BC B1                   OR      C
173   01BD 20 F9                JR      NZ,.init_hyper
174   01BF
175   01BF                      ; Load some test vectors
176   01BF CD C3 01             CALL    load_test_vectors
177   01C2
178   01C2 C9                   RET
179   01C3
180   01C3              ; Load test vectors with simple patterns
181   01C3              load_test_vectors:
182   01C3 06 10                LD      B,16            ; Load 16 test vectors
183   01C5 21 75 06             LD      HL,vectors_db
184   01C8              .load_loop:
185   01C8 C5                   PUSH    BC
186   01C9 E5                   PUSH    HL
187   01CA
188   01CA                      ; Create a simple pattern for each vector
189   01CA 0E 20                LD      C,VECTOR_BYTES
190   01CC              .pattern_loop:
191   01CC 78                   LD      A,B
192   01CD A9                   XOR     C
193   01CE 77                   LD      (HL),A
194   01CF 23                   INC     HL
195   01D0 0D                   DEC     C
196   01D1 20 F9                JR      NZ,.pattern_loop
197   01D3
198   01D3 E1                   POP     HL
199   01D4 11 20 00             LD      DE,VECTOR_BYTES
200   01D7 19                   ADD     HL,DE
201   01D8
202   01D8 3A DA 05             LD      A,(vector_count)
203   01DB 3C                   INC     A
204   01DC 32 DA 05             LD      (vector_count),A
205   01DF
206   01DF C1                   POP     BC
207   01E0 10 E6                DJNZ    .load_loop
208   01E2
209   01E2 C9                   RET
210   01E3
211   01E3              ; Demo UI with vector selection
212   01E3              demo_ui:
213   01E3 CD 8B 01             CALL    clear_screen
214   01E6 CD 67 02             CALL    draw_ui_frame
215   01E9
216   01E9 AF                   XOR     A
217   01EA 32 DC 05             LD      (selected_vector),A
218   01ED
219   01ED 3E 23                LD      A,"#" ; #CC           ; "🮘"
220   01EF 32 DB 05             LD      (vector_char),A
221   01F2
222   01F2 CD 73 03             CALL    display_vectors
223   01F5
224   01F5 AF                   XOR     A
225   01F6 32 DD 05             LD      (current_display),A
226   01F9 32 DC 05             LD      (selected_vector),A
227   01FC
228   01FC              .ui_redraw
229   01FC 3E FF                LD      A,#FF ; #DB           ; "█"
230   01FE 32 DB 05             LD      (vector_char),A
231   0201
232   0201                      ; Highlight the current vector
233   0201 CD 32 02             CALL    .draw_vector
234   0204
235   0204 3E 23                LD      A,"#" ; #CC           ; "🮘"
236   0206 32 DB 05             LD      (vector_char),A
237   0209
238   0209              .ui_loop:
239   0209 CD F2 03             CALL    draw_plasma     ; Simple plasma effect
240   020C CD FA 03             CALL    update_scroller
241   020F
242   020F                      ; Check for a key pressed
243   020F CD 75 01             call    check_key
244   0212 B7                   OR      A
245   0213 28 F4                JR      Z,.ui_loop      ; No key pressed
246   0215
247   0215                      ; Disable highlight
248   0215 F5                   PUSH    AF
249   0216 CD 32 02             CALL    .draw_vector
250   0219 F1                   POP     AF
251   021A
252   021A                      ; Handle key
253   021A FE 71                CP      "q"
254   021C C8                   RET     Z
255   021D FE 51                CP      "Q"
256   021F C8                   RET     Z               ; Quit
257   0220
258   0220 FE 1F                CP      31              ; Down
259   0222 28 18                JR      Z,.move_down
260   0224
261   0224 FE 1E                CP      30              ; Up
262   0226 28 26                JR      Z,.move_up
263   0228
264   0228 FE 0D                CP      13              ; Enter
265   022A 28 2E                JR      Z,.do_search
266   022C
267   022C FE 20                CP      32              ; Space
268   022E 28 2A                JR      Z,.do_search
269   0230
270   0230 18 D7                JR      .ui_loop
271   0232
272   0232              .draw_vector:
273   0232 3A DC 05             LD      A,(selected_vector)
274   0235 32 DD 05             LD      (current_display),A
275   0238 47                   LD      B,A
276   0239 C3 8A 03             JP      display_vector
277   023C
278   023C              .move_down:
279   023C 3A DC 05             LD      A,(selected_vector)
280   023F 3C                   INC     A
281   0240 47                   LD      B,A
282   0241 3A DA 05             LD      A,(vector_count)
283   0244 3D                   DEC     A
284   0245 B8                   CP      B
285   0246 38 B4                JR      C,.ui_redraw    ; Already at bottom
286   0248 78                   LD      A,B
287   0249 32 DC 05             LD      (selected_vector),A
288   024C 18 AE                JR      .ui_redraw
289   024E
290   024E              .move_up:
291   024E 3A DC 05             LD      A,(selected_vector)
292   0251 B7                   OR      A
293   0252 28 A8                JR      Z,.ui_redraw    ; Already at top
294   0254 3D                   DEC     A
295   0255 32 DC 05             LD      (selected_vector),A
296   0258 18 A2                JR      .ui_redraw
297   025A
298   025A              .do_search:
299   025A CD E0 04             CALL    perform_search
300   025D CD FB 04             CALL    display_results
301   0260
302   0260                      ; Wait for key
303   0260 0E 01                LD      C,C_READ
304   0262 CD 05 00             CALL    BDOS
305   0265
306   0265 18 95                JR      .ui_redraw
307   0267
308   0267              ; Draw UI frame
309   0267              draw_ui_frame:
310   0267 CD 8B 01             CALL    clear_screen
311   026A
312   026A 11 71 02             LD      DE,ui_title
313   026D CD 6B 01             CALL    print_str
314   0270 C9                   RET
315   0271
316   0271              ui_title:
317   0271                      ; Frame glyphs are located in characters between 0 and 31 of ASCII
318   0271                      ; table, so to correctly print then I need to print the ASCII code
319   0271                      ; 1 and then send the glyph ASCII code plus 64.
320   0271 1B 78 35             DEFM    27,"x5"             ; Disable cursor
321   0274
322   0274 01 58                DEFM    1,"X"               ; "┌"
323   0276 01 57       > DEFM    1,"W"               ; "─"
323   0278 01 57       > DEFM    1,"W"
323   027A 01 57       > DEFM    1,"W"
323   027C 01 57       > DEFM    1,"W"
323   027E 01 57       > DEFM    1,"W"
323   0280 01 57       > DEFM    1,"W"
323   0282 01 57       > DEFM    1,"W"
323   0284 01 57       > DEFM    1,"W"
323   0286 01 57       > DEFM    1,"W"
323   0288 01 57       > DEFM    1,"W"
323   028A 01 57       > DEFM    1,"W"
323   028C 01 57       > DEFM    1,"W"
323   028E 01 57       > DEFM    1,"W"
323   0290 01 57       > DEFM    1,"W"
323   0292 01 57       > DEFM    1,"W"
323   0294 01 57       > DEFM    1,"W"
323   0296 01 57       > DEFM    1,"W"
323   0298 01 57       > DEFM    1,"W"
323   029A 01 57       > DEFM    1,"W"
323   029C 01 57       > DEFM    1,"W"
323   029E 01 57       > DEFM    1,"W"
323   02A0 01 57       > DEFM    1,"W"
323   02A2 01 57       > DEFM    1,"W"
323   02A4 01 57       > DEFM    1,"W"
323   02A6 01 57       > DEFM    1,"W"
323   02A8 01 57       > DEFM    1,"W"
323   02AA 01 57       > DEFM    1,"W"
323   02AC 01 57       > DEFM    1,"W"
323   02AE 01 57       > DEFM    1,"W"
323   02B0 01 57       > DEFM    1,"W"
323   02B2 01 57       > DEFM    1,"W"
323   02B4 01 57       > DEFM    1,"W"
323   02B6 01 57       > DEFM    1,"W"
323   02B8 01 57       > DEFM    1,"W"
323   02BA 01 57       > DEFM    1,"W"
324   02BC 01 59 0D 0A          DEFM    1,"Y",13,10         ; "┐"
325   02C0
326   02C0 01 56                DEFM    1,"V"               ; "│"
327   02C2 20 5A 56 44          DEFM    " ZVDB-Z80 Vector Database Demo MSX "
327   02C6 42 2D 5A 38
327   02CA 30 20 56 65
327   02CE 63 74 6F 72
327   02D2 20 44 61 74
327   02D6 61 62 61 73
327   02DA 65 20 44 65
327   02DE 6D 6F 20 4D
327   02E2 53 58 20
328   02E5 01 56 0D 0A          DEFM    1,"V",13,10         ; "│"
329   02E9
330   02E9 01 5A                DEFM    1,"Z"               ; "└"
331   02EB 01 57       > DEFM    1,"W"               ; "─"
331   02ED 01 57       > DEFM    1,"W"
331   02EF 01 57       > DEFM    1,"W"
331   02F1 01 57       > DEFM    1,"W"
331   02F3 01 57       > DEFM    1,"W"
331   02F5 01 57       > DEFM    1,"W"
331   02F7 01 57       > DEFM    1,"W"
331   02F9 01 57       > DEFM    1,"W"
331   02FB 01 57       > DEFM    1,"W"
331   02FD 01 57       > DEFM    1,"W"
331   02FF 01 57       > DEFM    1,"W"
331   0301 01 57       > DEFM    1,"W"
331   0303 01 57       > DEFM    1,"W"
331   0305 01 57       > DEFM    1,"W"
331   0307 01 57       > DEFM    1,"W"
331   0309 01 57       > DEFM    1,"W"
331   030B 01 57       > DEFM    1,"W"
331   030D 01 57       > DEFM    1,"W"
331   030F 01 57       > DEFM    1,"W"
331   0311 01 57       > DEFM    1,"W"
331   0313 01 57       > DEFM    1,"W"
331   0315 01 57       > DEFM    1,"W"
331   0317 01 57       > DEFM    1,"W"
331   0319 01 57       > DEFM    1,"W"
331   031B 01 57       > DEFM    1,"W"
331   031D 01 57       > DEFM    1,"W"
331   031F 01 57       > DEFM    1,"W"
331   0321 01 57       > DEFM    1,"W"
331   0323 01 57       > DEFM    1,"W"
331   0325 01 57       > DEFM    1,"W"
331   0327 01 57       > DEFM    1,"W"
331   0329 01 57       > DEFM    1,"W"
331   032B 01 57       > DEFM    1,"W"
331   032D 01 57       > DEFM    1,"W"
331   032F 01 57       > DEFM    1,"W"
332   0331 01 5B 0D 0A          DEFM    1,"[",13,10         ; "┘"
333   0335
334   0335 55 73 65 20          DEFM    "Use arrows keys to select, <Enter> to search or "
334   0339 61 72 72 6F
334   033D 77 73 20 6B
334   0341 65 79 73 20
334   0345 74 6F 20 73
334   0349 65 6C 65 63
334   034D 74 2C 20 3C
334   0351 45 6E 74 65
334   0355 72 3E 20 74
334   0359 6F 20 73 65
334   035D 61 72 63 68
334   0361 20 6F 72 20
335   0365 3C 51 3E 20          DEFM    "<Q> to quit",13,10,0
335   0369 74 6F 20 71
335   036D 75 69 74 0D
335   0371 0A 00
336   0373
337   0373              ; Display vectors with 8x8 sprite representation
338   0373              display_vectors:
339   0373 3A DA 05             LD      A,(vector_count)
340   0376 47                   LD      B,A
341   0377
342   0377 AF                   XOR     A
343   0378 32 DD 05             LD      (current_display),A
344   037B
345   037B              .display_loop:
346   037B C5                   PUSH    BC
347   037C CD 8A 03             CALL    display_vector
348   037F C1                   POP     BC
349   0380
350   0380 3A DD 05             LD      A,(current_display)
351   0383 3C                   INC     A
352   0384 32 DD 05             LD      (current_display),A
353   0387
354   0387 10 F2                DJNZ    .display_loop
355   0389 C9                   RET
356   038A
357   038A              VECTOR_POS_Y:       EQU 5
358   038A              VECTOR_POS_X:       EQU 0
359   038A
360   038A              display_vector:
361   038A                      ; Set cursor position
362   038A C6 06                ADD     A,VECTOR_POS_Y + 1
363   038C 32 DC F3             LD      (CSRY),A
364   038F
365   038F 3E 01                LD      A,VECTOR_POS_X + 1
366   0391 32 DD F3             LD      (CSRX),A
367   0394
368   0394                      ; Display vector number
369   0394 3A DD 05             LD      A,(current_display)
370   0397 CD 3B 05             CALL    print_hex_byte
371   039A
372   039A 3E 3A                LD      A,":"
373   039C CD 64 01             CALL    print_char
374   039F
375   039F 3E 20                LD      A," "
376   03A1 CD 64 01             CALL    print_char
377   03A4
378   03A4                      ; Display first 8 bytes as 8x8 sprite
379   03A4 CD AE 03             CALL    display_sprite
380   03A7
381   03A7
382   03A7                      ; New line
383   03A7 11 D7 05             LD      DE,crlf
384   03AA CD 6B 01             CALL    print_str
385   03AD
386   03AD C9                   RET
387   03AE
388   03AE              ; Display 8x8 sprite from vector data
389   03AE              display_sprite:
390   03AE 3A DB 05             LD      A,(vector_char)
391   03B1 4F                   LD      C,A
392   03B2
393   03B2                      ; Get vector address
394   03B2 3A DD 05             LD      A,(current_display)
395   03B5 6F                   LD      L,A
396   03B6 26 00                LD      H,0
397   03B8 29          > ADD     HL,HL           ; x32
397   03B9 29          > ADD     HL,HL
397   03BA 29          > ADD     HL,HL
397   03BB 29          > ADD     HL,HL
397   03BC 29          > ADD     HL,HL
398   03BD 11 75 06             LD      DE,vectors_db
399   03C0 19                   ADD     HL,DE
400   03C1
401   03C1 11 E5 05             LD      DE,print_buffer
402   03C4
403   03C4                      ; Display 8 bytes as 8x8 sprite
404   03C4 06 08                LD      B,8
405   03C6              .sprite_loop:
406   03C6 C5                   PUSH    BC
407   03C7 7E                   LD      A,(HL)
408   03C8 23                   INC     HL
409   03C9 E5                   PUSH    HL
410   03CA
411   03CA                      ; Display 8 bits
412   03CA 06 08                LD      B,8
413   03CC              .bit_loop:
414   03CC 17                   RLA
415   03CD F5                   PUSH    AF
416   03CE
417   03CE 38 04                JR      C,.set_bit
418   03D0 3E 20                LD      A," "           ; use a space
419   03D2 18 01                JR      .show_bit
420   03D4              .set_bit:
421   03D4 79                   LD      A,C             ; use a glyph
422   03D5              .show_bit:
423   03D5 CD EF 03             CALL    .push_char
424   03D8 F1                   POP     AF
425   03D9 10 F1                DJNZ    .bit_loop
426   03DB
427   03DB 3E 20                LD      A," "
428   03DD CD EF 03             CALL    .push_char
429   03E0
430   03E0 E1                   POP     HL
431   03E1 C1                   POP     BC
432   03E2 10 E2                DJNZ    .sprite_loop
433   03E4
434   03E4 AF                   XOR     A
435   03E5 CD EF 03             CALL    .push_char
436   03E8
437   03E8 11 E5 05             LD      DE,print_buffer
438   03EB CD 6B 01             CALL    print_str
439   03EE
440   03EE C9                   RET
441   03EF              .push_char:
442   03EF 12                   LD      (DE),A
443   03F0 13                   INC     DE
444   03F1 C9                   RET
445   03F2
446   03F2              ; Simple plasma effect
447   03F2              draw_plasma:
448   03F2 3A E2 05             LD      A,(plasma_phase)
449   03F5 3C                   INC     A
450   03F6 32 E2 05             LD      (plasma_phase),A
451   03F9                      ; Simplified - would implement full plasma
452   03F9 C9                   RET
453   03FA
454   03FA              ; Update scrolling text
455   03FA              update_scroller:
456   03FA 06 28                LD      B,40
457   03FC 0E 16                LD      C,22
458   03FE CD 90 01             CALL    set_cursor_xy
459   0401
460   0401 3A 26 04             LD      A,(scroll_text)
461   0404 4F                   LD      C,A
462   0405
463   0405 21 27 04             LD      HL,scroll_text + 1
464   0408 11 26 04             LD      DE,scroll_text
465   040B 06 B9                LD      B,scroll_text_end - scroll_text - 1
466   040D              .update_message:
467   040D 7E                   LD      A,(HL)
468   040E 12                   LD      (DE),A
469   040F 23                   INC     HL
470   0410 13                   INC     DE
471   0411 10 FA                DJNZ    .update_message
472   0413
473   0413 79                   LD      A,C
474   0414 12                   LD      (DE),A
475   0415
476   0415 21 26 04             LD      HL,scroll_text
477   0418 06 28                LD      B,40
478   041A              .scroll_loop:
479   041A C5                   PUSH BC
480   041B E5                   PUSH HL
481   041C
482   041C 7E                   LD      A,(HL)
483   041D CD 64 01             CALL    print_char
484   0420
485   0420 E1                   POP     HL
486   0421 C1                   POP     BC
487   0422
488   0422 23                   INC     HL
489   0423 10 F5                DJNZ    .scroll_loop
490   0425
491   0425 C9                   RET
492   0426
493   0426              scroll_text:
494   0426 2A 2A 2A 20          DEFM    "*** ZVDB-Z80 MSX EDITION *** GREETINGS TO ALL "
494   042A 5A 56 44 42
494   042E 2D 5A 38 30
494   0432 20 4D 53 58
494   0436 20 45 44 49
494   043A 54 49 4F 4E
494   043E 20 2A 2A 2A
494   0442 20 47 52 45
494   0446 45 54 49 4E
494   044A 47 53 20 54
494   044E 4F 20 41 4C
494   0452 4C 20
495   0454 44 45 4D 4F          DEFM    "DEMOSCENERS! SPECIAL THANKS TO SIRIL/RD AND OISEE/4D "
495   0458 53 43 45 4E
495   045C 45 52 53 21
495   0460 20 53 50 45
495   0464 43 49 41 4C
495   0468 20 54 48 41
495   046C 4E 4B 53 20
495   0470 54 4F 20 53
495   0474 49 52 49 4C
495   0478 2F 52 44 20
495   047C 41 4E 44 20
495   0480 4F 49 53 45
495   0484 45 2F 34 44
495   0488 20
496   0489 46 4F 52 20          DEFM    "FOR THE MUSIC... THIS IS A VECTOR DATABASE DEMO RUNNING "
496   048D 54 48 45 20
496   0491 4D 55 53 49
496   0495 43 2E 2E 2E
496   0499 20 54 48 49
496   049D 53 20 49 53
496   04A1 20 41 20 56
496   04A5 45 43 54 4F
496   04A9 52 20 44 41
496   04AD 54 41 42 41
496   04B1 53 45 20 44
496   04B5 45 4D 4F 20
496   04B9 52 55 4E 4E
496   04BD 49 4E 47 20
497   04C1 4F 4E 20 59          DEFM    "ON YOUR MSX!                   "
497   04C5 4F 55 52 20
497   04C9 4D 53 58 21
497   04CD 20 20 20 20
497   04D1 20 20 20 20
497   04D5 20 20 20 20
497   04D9 20 20 20 20
497   04DD 20 20 20
498   04E0              scroll_text_end:
499   04E0
500   04E0
501   04E0              ; Perform search
502   04E0              perform_search:
503   04E0                      ; Get selected vector as query
504   04E0 3A DC 05             LD      A,(selected_vector)
505   04E3 6F                   LD      L,A
506   04E4 26 00                LD      H,0
507   04E6 29          > ADD     HL,HL           ; x32
507   04E7 29          > ADD     HL,HL
507   04E8 29          > ADD     HL,HL
507   04E9 29          > ADD     HL,HL
507   04EA 29          > ADD     HL,HL
508   04EB 11 75 06             LD      DE,vectors_db
509   04EE 19                   ADD     HL,DE
510   04EF 11 35 06             LD      DE,query_vector
511   04F2 01 20 00             LD      BC,VECTOR_BYTES
512   04F5 ED B0                LDIR
513   04F7
514   04F7                      ; Brute force search
515   04F7 CD 63 05             CALL    bf_search
516   04FA C9                   RET
517   04FB
518   04FB              ; Display search results
519   04FB              display_results:
520   04FB 11 1A 05             LD      DE,results_msg
521   04FE CD 6B 01             CALL    print_str
522   0501
523   0501 3A E1 05             LD      A,(best_index)
524   0504 CD 3B 05             CALL    print_hex_byte
525   0507
526   0507 11 32 05             LD      DE,score_msg
527   050A CD 6B 01             CALL    print_str
528   050D
529   050D 2A DF 05             LD      HL,(best_score)
530   0510 CD 5A 05             CALL    print_hex_word
531   0513
532   0513 11 D7 05             LD      DE,crlf
533   0516 CD 6B 01             CALL    print_str
534   0519 C9                   RET
535   051A
536   051A              results_msg:
537   051A 1B 59 36 20          DEFM    27,"Y",32+22," Best match: Vector ",0
537   051E 42 65 73 74
537   0522 20 6D 61 74
537   0526 63 68 3A 20
537   052A 56 65 63 74
537   052E 6F 72 20 00
538   0532
539   0532              score_msg:
540   0532 20 53 63 6F          DEFM    " Score: ",0
540   0536 72 65 3A 20
540   053A 00
541   053B
542   053B              ; Print hex byte in A
543   053B              print_hex_byte:
544   053B F5                   PUSH    AF
545   053C 1F          > RRA
545   053D 1F          > RRA
545   053E 1F          > RRA
545   053F 1F          > RRA
546   0540 E6 0F                AND     #0F
547   0542 CD 4C 05             CALL    print_hex_digit
548   0545 F1                   POP     AF
549   0546 E6 0F                AND     #0F
550   0548 CD 4C 05             CALL    print_hex_digit
551   054B C9                   RET
552   054C
553   054C              print_hex_digit:
554   054C FE 0A                CP      10
555   054E 38 04                JR      C,.digit
556   0550 C6 37                ADD     A,"A"-10
557   0552 18 02                JR      .print
558   0554              .digit:
559   0554 C6 30                ADD     A,"0"
560   0556              .print:
561   0556 CD 64 01             call    print_char
562   0559 C9                   RET
563   055A
564   055A              ; Print hex word in HL
565   055A              print_hex_word:
566   055A 7C                   LD      A,H
567   055B CD 3B 05             CALL    print_hex_byte
568   055E 7D                   LD      A,L
569   055F CD 3B 05             CALL    print_hex_byte
570   0562 C9                   RET
571   0563
572   0563              ; Include core ZVDB routines (adapted from zvdb.asm)
573   0563
574   0563              ; Brute force search
575   0563              bf_search:
576   0563 21 00 00             LD      HL,#0000
577   0566 22 DF 05             LD      (best_score),HL
578   0569 AF                   XOR     A
579   056A 32 E1 05             LD      (best_index),A
580   056D
581   056D 3A DA 05             LD      A,(vector_count)
582   0570 B7                   OR      A
583   0571 C8                   RET     Z               ; No vectors
584   0572
585   0572 47                   LD      B,A
586   0573 AF                   XOR     A
587   0574 32 DE 05             LD      (current_index),A
588   0577
589   0577              .search_loop:
590   0577 C5                   PUSH    BC
591   0578
592   0578                      ; Get vector address
593   0578 3A DE 05             LD      A,(current_index)
594   057B 6F                   LD      L,A
595   057C 26 00                LD      H,0
596   057E 29          > ADD     HL,HL           ; x32
596   057F 29          > ADD     HL,HL
596   0580 29          > ADD     HL,HL
596   0581 29          > ADD     HL,HL
596   0582 29          > ADD     HL,HL
597   0583 11 75 06             LD      DE,vectors_db
598   0586 19                   ADD     HL,DE
599   0587
600   0587                      ; Calculate similarity
601   0587 11 35 06             LD      DE,query_vector
602   058A CD AB 05             CALL    dot_product_1bit
603   058D
604   058D                      ; Compare with best
605   058D ED 5B DF 05          LD      DE,(best_score)
606   0591 B7                   OR      A               ; Clear carry
607   0592 ED 52                SBC     HL,DE
608   0594 38 0A                JR      C,.not_better
609   0596 19                   ADD     HL,DE           ; Restore score
610   0597 22 DF 05             LD      (best_score),HL
611   059A 3A DE 05             LD      A,(current_index)
612   059D 32 E1 05             LD      (best_index),A
613   05A0
614   05A0              .not_better:
615   05A0 3A DE 05             LD      A,(current_index)
616   05A3 3C                   INC     A
617   05A4 32 DE 05             LD      (current_index),A
618   05A7
619   05A7 C1                   POP     BC
620   05A8 10 CD                DJNZ    .search_loop
621   05AA
622   05AA C9                   RET
623   05AB
624   05AB              ; Calculate dot product for 1-bit vectors
625   05AB              ; HL = vector1, DE = vector2
626   05AB              ; Returns: HL = similarity (256 - 2*hamming_distance)
627   05AB              dot_product_1bit:
628   05AB C5                   PUSH    BC
629   05AC D5                   PUSH    DE
630   05AD
631   05AD 01 00 00             LD      BC,0            ; Hamming distance counter
632   05B0 3E 20                LD      A,VECTOR_BYTES
633   05B2
634   05B2              .dot_loop:
635   05B2 F5                   PUSH    AF
636   05B3 1A                   LD      A,(DE)
637   05B4 AE                   XOR     (HL)            ; XOR gives different bits
638   05B5
639   05B5                      ; Count bits
640   05B5 CD D0 05             CALL    count_bits
641   05B8 81                   ADD     A,C
642   05B9 4F                   LD      C,A
643   05BA 30 01                JR      NC,.no_carry
644   05BC 04                   INC     B
645   05BD              .no_carry:
646   05BD
647   05BD 23                   INC     HL
648   05BE 13                   INC     DE
649   05BF F1                   POP     AF
650   05C0 3D                   DEC     A
651   05C1 20 EF                JR      NZ,.dot_loop
652   05C3
653   05C3                      ; Calculate 256 - 2*hamming
654   05C3 60                   LD      H,B
655   05C4 69                   LD      L,C
656   05C5 29                   ADD     HL,HL           ; x2
657   05C6 EB                   EX      DE,HL
658   05C7 21 00 01             LD      HL,256
659   05CA B7                   OR      A
660   05CB ED 52                SBC     HL,DE
661   05CD
662   05CD D1                   POP     DE
663   05CE C1                   POP     BC
664   05CF C9                   RET
665   05D0
666   05D0              ; Count bits in A
667   05D0              count_bits:
668   05D0 E5                   PUSH    HL
669   05D1 26 19                LD      H,popcount_table/256
670   05D3 6F                   LD      L,A
671   05D4 7E                   LD      A,(HL)
672   05D5 E1                   POP     HL
673   05D6 C9                   RET
674   05D7
675   05D7              ; Variables
676   05D7 0D 0A 00     crlf:           DEFM    13,10,0
677   05DA 00           vector_count:   DEFB    0
678   05DB 00           vector_char:    DEFB    0
679   05DC 00           selected_vector: DEFB   0
680   05DD 00           current_display: DEFB   0
681   05DE 00           current_index:  DEFB    0
682   05DF 00 00        best_score:     DEFW    0
683   05E1 00           best_index:     DEFB    0
684   05E2 00           plasma_phase:   DEFB    0
685   05E3 26 04        scroll_ptr:     DEFW    scroll_text
686   05E5
687   05E5              ; To build strings before sent to screen
688   05E5              print_buffer:
689   05E5 00          > DEFB    0
689   05E6 00          > DEFB    0
689   05E7 00          > DEFB    0
689   05E8 00          > DEFB    0
689   05E9 00          > DEFB    0
689   05EA 00          > DEFB    0
689   05EB 00          > DEFB    0
689   05EC 00          > DEFB    0
689   05ED 00          > DEFB    0
689   05EE 00          > DEFB    0
689   05EF 00          > DEFB    0
689   05F0 00          > DEFB    0
689   05F1 00          > DEFB    0
689   05F2 00          > DEFB    0
689   05F3 00          > DEFB    0
689   05F4 00          > DEFB    0
689   05F5 00          > DEFB    0
689   05F6 00          > DEFB    0
689   05F7 00          > DEFB    0
689   05F8 00          > DEFB    0
689   05F9 00          > DEFB    0
689   05FA 00          > DEFB    0
689   05FB 00          > DEFB    0
689   05FC 00          > DEFB    0
689   05FD 00          > DEFB    0
689   05FE 00          > DEFB    0
689   05FF 00          > DEFB    0
689   0600 00          > DEFB    0
689   0601 00          > DEFB    0
689   0602 00          > DEFB    0
689   0603 00          > DEFB    0
689   0604 00          > DEFB    0
689   0605 00          > DEFB    0
689   0606 00          > DEFB    0
689   0607 00          > DEFB    0
689   0608 00          > DEFB    0
689   0609 00          > DEFB    0
689   060A 00          > DEFB    0
689   060B 00          > DEFB    0
689   060C 00          > DEFB    0
689   060D 00          > DEFB    0
689   060E 00          > DEFB    0
689   060F 00          > DEFB    0
689   0610 00          > DEFB    0
689   0611 00          > DEFB    0
689   0612 00          > DEFB    0
689   0613 00          > DEFB    0
689   0614 00          > DEFB    0
689   0615 00          > DEFB    0
689   0616 00          > DEFB    0
689   0617 00          > DEFB    0
689   0618 00          > DEFB    0
689   0619 00          > DEFB    0
689   061A 00          > DEFB    0
689   061B 00          > DEFB    0
689   061C 00          > DEFB    0
689   061D 00          > DEFB    0
689   061E 00          > DEFB    0
689   061F 00          > DEFB    0
689   0620 00          > DEFB    0
689   0621 00          > DEFB    0
689   0622 00          > DEFB    0
689   0623 00          > DEFB    0
689   0624 00          > DEFB    0
689   0625 00          > DEFB    0
689   0626 00          > DEFB    0
689   0627 00          > DEFB    0
689   0628 00          > DEFB    0
689   0629 00          > DEFB    0
689   062A 00          > DEFB    0
689   062B 00          > DEFB    0
689   062C 00          > DEFB    0
689   062D 00          > DEFB    0
689   062E 00          > DEFB    0
689   062F 00          > DEFB    0
689   0630 00          > DEFB    0
689   0631 00          > DEFB    0
689   0632 00          > DEFB    0
689   0633 00          > DEFB    0
689   0634 00          > DEFB    0
690   0635
691   0635              ; Buffers and tables
692   0635 00 00 00...  query_vector:   DEFS    VECTOR_BYTES
693   0655 00 00 00...  temp_vector:    DEFS    VECTOR_BYTES
694   0675
695   0675              ; Vector database (reduced size for CP/M)
696   0675 00 00 00...  vectors_db:     DEFS    VECTOR_BYTES * MAX_VECTORS
697   1675
698   1675              ; Hash index
699   1675 00 00 00...  hash_index:     DEFS    128 * 2
700   1775
701   1775              ; Hyperplanes
702   1775 00 00 00...  hyperplanes:    DEFS    HYPERPLANES * VECTOR_BYTES
703   1875
704   1875              ; Popcount table
705   1875 00 00 00...          ALIGN   256
706   1900              popcount_table:
707   1900 00 01 01 02          DEFB    0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4
707   1904 01 02 02 03
707   1908 01 02 02 03
707   190C 02 03 03 04
708   1910 01 02 02 03          DEFB    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
708   1914 02 03 03 04
708   1918 02 03 03 04
708   191C 03 04 04 05
709   1920 01 02 02 03          DEFB    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
709   1924 02 03 03 04
709   1928 02 03 03 04
709   192C 03 04 04 05
710   1930 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
710   1934 03 04 04 05
710   1938 03 04 04 05
710   193C 04 05 05 06
711   1940 01 02 02 03          DEFB    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
711   1944 02 03 03 04
711   1948 02 03 03 04
711   194C 03 04 04 05
712   1950 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
712   1954 03 04 04 05
712   1958 03 04 04 05
712   195C 04 05 05 06
713   1960 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
713   1964 03 04 04 05
713   1968 03 04 04 05
713   196C 04 05 05 06
714   1970 03 04 04 05          DEFB    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
714   1974 04 05 05 06
714   1978 04 05 05 06
714   197C 05 06 06 07
715   1980 01 02 02 03          DEFB    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
715   1984 02 03 03 04
715   1988 02 03 03 04
715   198C 03 04 04 05
716   1990 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
716   1994 03 04 04 05
716   1998 03 04 04 05
716   199C 04 05 05 06
717   19A0 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
717   19A4 03 04 04 05
717   19A8 03 04 04 05
717   19AC 04 05 05 06
718   19B0 03 04 04 05          DEFB    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
718   19B4 04 05 05 06
718   19B8 04 05 05 06
718   19BC 05 06 06 07
719   19C0 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
719   19C4 03 04 04 05
719   19C8 03 04 04 05
719   19CC 04 05 05 06
720   19D0 03 04 04 05          DEFB    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
720   19D4 04 05 05 06
720   19D8 04 05 05 06
720   19DC 05 06 06 07
721   19E0 03 04 04 05          DEFB    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
721   19E4 04 05 05 06
721   19E8 04 05 05 06
721   19EC 05 06 06 07
722   19F0 04 05 05 06          DEFB    4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8
722   19F4 05 06 06 07
722   19F8 05 06 06 07
722   19FC 06 07 07 08
723   1A00
724   1A00              ; Stack space
725   1A00 00 00 00...          DEFS    256
726   1B00              stack_top:
727   1B00
728   1B00                      END     start
# file closed: zvdb_msx.asm
