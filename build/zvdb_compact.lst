# file opened: test_compact.asm
  1   0000              ; Test program for compact zvdb-z80 with << 5 addressing
  2   0000
  3   0000                      DEVICE ZXSPECTRUM128
  4   0000                      OUTPUT "zvdb_compact_test.sna"
  5   0000
  6   0000                      ORG     #6000
  7   6000
  8   6000              start:
  9   6000 F3                   DI
 10   6001 31 FF 5F             LD      SP,#5FFF
 11   6004
 12   6004                      ; Clear screen
 13   6004 21 00 40             LD      HL,#4000
 14   6007 11 01 40             LD      DE,#4001
 15   600A 01 FF 1A             LD      BC,#1AFF
 16   600D 36 00                LD      (HL),0
 17   600F ED B0                LDIR
 18   6011
 19   6011                      ; Print header
 20   6011 21 20 61             LD      HL,msg_header
 21   6014 CD 8B 60             CALL    print_string
 22   6017
 23   6017                      ; Initialize database
 24   6017 CD 00 80             CALL    #8000          ; Call main/init_db
 25   601A
 26   601A                      ; Add many test vectors to show compact storage
 27   601A 06 C8                LD      B,200          ; Add 200 vectors
 28   601C 21 E0 60             LD      HL,test_vec1
 29   601F              .add_loop:
 30   601F C5                   PUSH    BC
 31   6020 E5                   PUSH    HL
 32   6021
 33   6021                      ; Modify vector slightly for variety
 34   6021 78                   LD      A,B
 35   6022 77                   LD      (HL),A         ; First byte = loop counter
 36   6023
 37   6023 CD 57 A7             CALL    add_vector
 38   6026
 39   6026 E1                   POP     HL
 40   6027 C1                   POP     BC
 41   6028 10 F5                DJNZ    .add_loop
 42   602A
 43   602A                      ; Print status
 44   602A 21 3E 61             LD      HL,msg_added
 45   602D CD 8B 60             CALL    print_string
 46   6030 3A 40 A5             LD      A,(vector_count)
 47   6033 CD 92 60             CALL    print_dec_a
 48   6036 21 45 61             LD      HL,msg_vectors
 49   6039 CD 8B 60             CALL    print_string
 50   603C
 51   603C                      ; Show memory usage
 52   603C 21 4F 61             LD      HL,msg_memory
 53   603F CD 8B 60             CALL    print_string
 54   6042 3A 40 A5             LD      A,(vector_count)
 55   6045 6F                   LD      L,A
 56   6046 26 00                LD      H,0
 57   6048                      ; Multiply by 32
 58   6048 29                   ADD     HL,HL
 59   6049 29                   ADD     HL,HL
 60   604A 29                   ADD     HL,HL
 61   604B 29                   ADD     HL,HL
 62   604C 29                   ADD     HL,HL
 63   604D CD 9F 60             CALL    print_dec_hl
 64   6050 21 5D 61             LD      HL,msg_bytes
 65   6053 CD 8B 60             CALL    print_string
 66   6056
 67   6056                      ; Reindex database
 68   6056 CD 05 A8             CALL    reindex
 69   6059
 70   6059 21 65 61             LD      HL,msg_indexed
 71   605C CD 8B 60             CALL    print_string
 72   605F
 73   605F                      ; Search for nearest to query
 74   605F 21 00 61             LD      HL,query_vec
 75   6062 CD 7C A7             CALL    bf_search
 76   6065
 77   6065                      ; Print result
 78   6065 F5                   PUSH    AF
 79   6066 C5                   PUSH    BC
 80   6067 21 79 61             LD      HL,msg_found
 81   606A CD 8B 60             CALL    print_string
 82   606D
 83   606D                      ; Print index
 84   606D C1                   POP     BC
 85   606E F1                   POP     AF
 86   606F C5                   PUSH    BC
 87   6070 CD 92 60             CALL    print_dec_a
 88   6073
 89   6073                      ; Print score
 90   6073 21 8B 61             LD      HL,msg_score
 91   6076 CD 8B 60             CALL    print_string
 92   6079 C1                   POP     BC
 93   607A 78                   LD      A,B
 94   607B CD C7 60             CALL    print_hex_byte
 95   607E 79                   LD      A,C
 96   607F CD C7 60             CALL    print_hex_byte
 97   6082
 98   6082                      ; Done
 99   6082 21 95 61             LD      HL,msg_done
100   6085 CD 8B 60             CALL    print_string
101   6088
102   6088              halt_loop:
103   6088 76                   HALT
104   6089 18 FD                JR      halt_loop
105   608B
106   608B              ; Print null-terminated string at HL
107   608B              print_string:
108   608B 7E                   LD      A,(HL)
109   608C B7                   OR      A
110   608D C8                   RET     Z
111   608E D7                   RST     #10
112   608F 23                   INC     HL
113   6090 18 F9                JR      print_string
114   6092
115   6092              ; Print A as decimal
116   6092              print_dec_a:
117   6092 F5                   PUSH    AF
118   6093 C5                   PUSH    BC
119   6094 E5                   PUSH    HL
120   6095
121   6095 6F                   LD      L,A
122   6096 26 00                LD      H,0
123   6098 CD 9F 60             CALL    print_dec_hl
124   609B
125   609B E1                   POP     HL
126   609C C1                   POP     BC
127   609D F1                   POP     AF
128   609E C9                   RET
129   609F
130   609F              ; Print HL as decimal (simplified, max 999)
131   609F              print_dec_hl:
132   609F E5                   PUSH    HL
133   60A0 D5                   PUSH    DE
134   60A1 C5                   PUSH    BC
135   60A2
136   60A2 11 64 00             LD      DE,100
137   60A5 CD B6 60             CALL    .print_digit
138   60A8 11 0A 00             LD      DE,10
139   60AB CD B6 60             CALL    .print_digit
140   60AE 7D                   LD      A,L
141   60AF C6 30                ADD     A,'0'
142   60B1 D7                   RST     #10
143   60B2
144   60B2 C1                   POP     BC
145   60B3 D1                   POP     DE
146   60B4 E1                   POP     HL
147   60B5 C9                   RET
148   60B6
149   60B6              .print_digit:
150   60B6 3E 2F                LD      A,'0'-1
151   60B8              .digit_loop:
152   60B8 3C                   INC     A
153   60B9 B7                   OR      A
154   60BA ED 52                SBC     HL,DE
155   60BC 30 FA                JR      NC,.digit_loop
156   60BE 19                   ADD     HL,DE
157   60BF FE 30                CP      '0'
158   60C1 20 02                JR      NZ,.print_it
159   60C3 3E 20                LD      A,' '          ; Leading zero suppression
160   60C5              .print_it:
161   60C5 D7                   RST     #10
162   60C6 C9                   RET
163   60C7
164   60C7              ; Print hex byte in A
165   60C7              print_hex_byte:
166   60C7 F5                   PUSH    AF
167   60C8 0F                   RRCA
168   60C9 0F                   RRCA
169   60CA 0F                   RRCA
170   60CB 0F                   RRCA
171   60CC E6 0F                AND     #0F
172   60CE CD D4 60             CALL    print_hex_digit
173   60D1 F1                   POP     AF
174   60D2 E6 0F                AND     #0F
175   60D4              print_hex_digit:
176   60D4 FE 0A                CP      10
177   60D6 38 04                JR      C,.digit
178   60D8 C6 37                ADD     A,'A'-10
179   60DA 18 02                JR      .print
180   60DC              .digit:
181   60DC C6 30                ADD     A,'0'
182   60DE              .print:
183   60DE D7                   RST     #10
184   60DF C9                   RET
185   60E0
186   60E0              ; Test vectors (32 bytes each, bit patterns)
187   60E0              test_vec1:
188   60E0 FF FF FF FF          DEFB    #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
188   60E4 FF FF FF FF
189   60E8 00 00 00 00          DEFB    #00,#00,#00,#00,#00,#00,#00,#00
189   60EC 00 00 00 00
190   60F0 FF FF FF FF          DEFB    #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
190   60F4 FF FF FF FF
191   60F8 00 00 00 00          DEFB    #00,#00,#00,#00,#00,#00,#00,#00
191   60FC 00 00 00 00
192   6100
193   6100              ; Query vector (similar to test_vec1 with counter=100)
194   6100              query_vec:
195   6100 64 FF FF FF          DEFB    100,#FF,#FF,#FF,#FF,#FF,#FF,#FF
195   6104 FF FF FF FF
196   6108 00 00 00 00          DEFB    #00,#00,#00,#00,#00,#00,#00,#00
196   610C 00 00 00 00
197   6110 FF FF FF FF          DEFB    #FF,#FF,#FF,#FF,#FF,#FF,#FF,#FF
197   6114 FF FF FF FF
198   6118 00 00 00 00          DEFB    #00,#00,#00,#00,#00,#00,#00,#00
198   611C 00 00 00 00
199   6120
200   6120              ; Messages
201   6120 5A 56 44 42  msg_header:     DEFB    "ZVDB-Z80 Compact Test (<<5)",13,13,0
201   6124 2D 5A 38 30
201   6128 20 43 6F 6D
201   612C 70 61 63 74
201   6130 20 54 65 73
201   6134 74 20 28 3C
201   6138 3C 35 29 0D
201   613C 0D 00
202   613E 41 64 64 65  msg_added:      DEFB    "Added ",0
202   6142 64 20 00
203   6145 20 76 65 63  msg_vectors:    DEFB    " vectors",13,0
203   6149 74 6F 72 73
203   614D 0D 00
204   614F 4D 65 6D 6F  msg_memory:     DEFB    "Memory used: ",0
204   6153 72 79 20 75
204   6157 73 65 64 3A
204   615B 20 00
205   615D 20 62 79 74  msg_bytes:      DEFB    " bytes",13,0
205   6161 65 73 0D 00
206   6165 44 61 74 61  msg_indexed:    DEFB    "Database reindexed",13,0
206   6169 62 61 73 65
206   616D 20 72 65 69
206   6171 6E 64 65 78
206   6175 65 64 0D 00
207   6179 4E 65 61 72  msg_found:      DEFB    "Nearest vector: #",0
207   617D 65 73 74 20
207   6181 76 65 63 74
207   6185 6F 72 3A 20
207   6189 23 00
208   618B 20 53 63 6F  msg_score:      DEFB    " Score: #",0
208   618F 72 65 3A 20
208   6193 23 00
209   6195 0D 54 65 73  msg_done:       DEFB    13,"Test complete",13,0
209   6199 74 20 63 6F
209   619D 6D 70 6C 65
209   61A1 74 65 0D 00
210   61A5
211   61A5              ; Include main zvdb code
212   61A5                      INCLUDE "zvdb.asm"
# file opened: zvdb.asm
  1+  61A5              ; zvdb-z80 - Minimal Z80 implementation of ZVDB
  2+  61A5              ; For Scorpion ZS-256-Turbo+ (256-bit vectors)
  3+  61A5              ; Uses 1-bit quantization and random hyperplane indexing
  4+  61A5
  5+  61A5                      DEVICE ZXSPECTRUM128
  6+  61A5
  7+  61A5              ; Constants
  8+  61A5              VECTOR_BITS     EQU     256     ; Bits per vector (Scorpion specific)
  9+  61A5              VECTOR_BYTES    EQU     32      ; Bytes per vector (256/8)
 10+  61A5              MAX_VECTORS     EQU     256     ; Maximum vectors (8KB / 32 bytes)
 11+  61A5              HASH_BITS       EQU     8       ; Bits for hash (256 buckets)
 12+  61A5              HYPERPLANES     EQU     8       ; Number of hyperplanes for hashing
 13+  61A5
 14+  61A5              ; Memory layout
 15+  61A5                      ORG     #8000
 16+  8000
 17+  8000              ; Vector database structure (32 bytes per vector)
 18+  8000              vectors_db:
 19+  8000 00 00 00...          DEFS    VECTOR_BYTES * MAX_VECTORS      ; Vector storage (8KB)
 20+  A000
 21+  A000              ; Hash index (256 entries, each pointing to vector list)
 22+  A000              hash_index:
 23+  A000 00 00 00...          DEFS    256 * 2         ; 256 16-bit pointers
 24+  A200
 25+  A200              ; Hyperplanes for hashing (8 hyperplanes × 32 bytes each)
 26+  A200              hyperplanes:
 27+  A200 00 00 00...          DEFS    HYPERPLANES * VECTOR_BYTES
 28+  A300
 29+  A300              ; Working buffers
 30+  A300              query_vector:
 31+  A300 00 00 00...          DEFS    VECTOR_BYTES    ; Query vector buffer
 32+  A320              temp_vector:
 33+  A320 00 00 00...          DEFS    VECTOR_BYTES    ; Temporary vector buffer
 34+  A340              result_scores:
 35+  A340 00 00 00...          DEFS    MAX_VECTORS * 2 ; 16-bit scores for each vector
 36+  A540
 37+  A540              ; Variables
 38+  A540 00           vector_count:   DEFB    0       ; Current number of vectors (max 32)
 39+  A541 00 00        best_score:     DEFW    0       ; Best score found
 40+  A543 00           best_index:     DEFB    0       ; Index of best match
 41+  A544
 42+  A544              ; Bit counting lookup table (0-255 -> count of 1 bits)
 43+  A544 00 00 00...          ALIGN   256
 44+  A600              popcount_table:
 45+  A600 00 01 01 02          DEFB    0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4
 45+  A604 01 02 02 03
 45+  A608 01 02 02 03
 45+  A60C 02 03 03 04
 46+  A610 01 02 02 03          DEFB    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
 46+  A614 02 03 03 04
 46+  A618 02 03 03 04
 46+  A61C 03 04 04 05
 47+  A620 01 02 02 03          DEFB    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
 47+  A624 02 03 03 04
 47+  A628 02 03 03 04
 47+  A62C 03 04 04 05
 48+  A630 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
 48+  A634 03 04 04 05
 48+  A638 03 04 04 05
 48+  A63C 04 05 05 06
 49+  A640 01 02 02 03          DEFB    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
 49+  A644 02 03 03 04
 49+  A648 02 03 03 04
 49+  A64C 03 04 04 05
 50+  A650 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
 50+  A654 03 04 04 05
 50+  A658 03 04 04 05
 50+  A65C 04 05 05 06
 51+  A660 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
 51+  A664 03 04 04 05
 51+  A668 03 04 04 05
 51+  A66C 04 05 05 06
 52+  A670 03 04 04 05          DEFB    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
 52+  A674 04 05 05 06
 52+  A678 04 05 05 06
 52+  A67C 05 06 06 07
 53+  A680 01 02 02 03          DEFB    1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5
 53+  A684 02 03 03 04
 53+  A688 02 03 03 04
 53+  A68C 03 04 04 05
 54+  A690 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
 54+  A694 03 04 04 05
 54+  A698 03 04 04 05
 54+  A69C 04 05 05 06
 55+  A6A0 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
 55+  A6A4 03 04 04 05
 55+  A6A8 03 04 04 05
 55+  A6AC 04 05 05 06
 56+  A6B0 03 04 04 05          DEFB    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
 56+  A6B4 04 05 05 06
 56+  A6B8 04 05 05 06
 56+  A6BC 05 06 06 07
 57+  A6C0 02 03 03 04          DEFB    2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6
 57+  A6C4 03 04 04 05
 57+  A6C8 03 04 04 05
 57+  A6CC 04 05 05 06
 58+  A6D0 03 04 04 05          DEFB    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
 58+  A6D4 04 05 05 06
 58+  A6D8 04 05 05 06
 58+  A6DC 05 06 06 07
 59+  A6E0 03 04 04 05          DEFB    3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7
 59+  A6E4 04 05 05 06
 59+  A6E8 04 05 05 06
 59+  A6EC 05 06 06 07
 60+  A6F0 04 05 05 06          DEFB    4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8
 60+  A6F4 05 06 06 07
 60+  A6F8 05 06 06 07
 60+  A6FC 06 07 07 08
 61+  A700
 62+  A700              ; Main entry point
 63+  A700              main:
 64+  A700 F3                   DI                      ; Disable interrupts
 65+  A701 31 FF 7F             LD      SP,#7FFF       ; Set stack
 66+  A704 CD 08 A7             CALL    init_db        ; Initialize database
 67+  A707 C9                   RET
 68+  A708
 69+  A708              ; Initialize database
 70+  A708              init_db:
 71+  A708 AF                   XOR     A
 72+  A709 32 40 A5             LD      (vector_count),A
 73+  A70C
 74+  A70C                      ; Clear hash index
 75+  A70C 21 00 A0             LD      HL,hash_index
 76+  A70F 11 01 A0             LD      DE,hash_index+1
 77+  A712 01 FF 01             LD      BC,256*2-1
 78+  A715 36 00                LD      (HL),0
 79+  A717 ED B0                LDIR
 80+  A719
 81+  A719                      ; Initialize random hyperplanes (simplified - would need proper random init)
 82+  A719 21 00 A2             LD      HL,hyperplanes
 83+  A71C 01 00 01             LD      BC,HYPERPLANES * VECTOR_BYTES
 84+  A71F 3E 55                LD      A,#55
 85+  A721              .init_hyper:
 86+  A721 77                   LD      (HL),A         ; Simple pattern for now
 87+  A722 23                   INC     HL
 88+  A723 0B                   DEC     BC
 89+  A724 78                   LD      A,B
 90+  A725 B1                   OR      C
 91+  A726 20 F9                JR      NZ,.init_hyper
 92+  A728
 93+  A728 C9                   RET
 94+  A729
 95+  A729              ; Count bits in a byte (A -> A)
 96+  A729              count_bits:
 97+  A729 E5                   PUSH    HL
 98+  A72A 26 A6                LD      H,popcount_table/256
 99+  A72C 6F                   LD      L,A
100+  A72D 7E                   LD      A,(HL)
101+  A72E E1                   POP     HL
102+  A72F C9                   RET
103+  A730
104+  A730              ; Calculate 1-bit dot product between two vectors
105+  A730              ; HL = vector1, DE = vector2
106+  A730              ; Returns: BC = similarity score (256 - 2*hamming_distance)
107+  A730              dot_product_1bit:
108+  A730 E5                   PUSH    HL
109+  A731 D5                   PUSH    DE
110+  A732
111+  A732 01 00 00             LD      BC,0           ; Bit difference counter
112+  A735 C5                   PUSH    BC             ; Save counter on stack
113+  A736
114+  A736 06 20                LD      B,VECTOR_BYTES
115+  A738              .dot_loop:
116+  A738 1A                   LD      A,(DE)         ; Get byte from vector2
117+  A739 AE                   XOR     (HL)           ; XOR with vector1 byte
118+  A73A CD 29 A7             CALL    count_bits     ; Count different bits
119+  A73D
120+  A73D                      ; Add to total
121+  A73D 4F                   LD      C,A
122+  A73E 06 00                LD      B,0
123+  A740 E3                   EX      (SP),HL        ; Get counter from stack
124+  A741 09                   ADD     HL,BC          ; Add bit count
125+  A742 E3                   EX      (SP),HL        ; Put counter back
126+  A743
127+  A743 23                   INC     HL
128+  A744 13                   INC     DE
129+  A745 10 F1                DJNZ    .dot_loop
130+  A747
131+  A747                      ; Calculate final score: 256 - 2*hamming_distance
132+  A747 C1                   POP     BC             ; Get hamming distance
133+  A748 CB 21                SLA     C              ; Multiply by 2
134+  A74A CB 10                RL      B
135+  A74C
136+  A74C 21 00 01             LD      HL,VECTOR_BITS
137+  A74F B7                   OR      A              ; Clear carry
138+  A750 ED 42                SBC     HL,BC          ; 256 - 2*hamming
139+  A752 44                   LD      B,H
140+  A753 4D                   LD      C,L
141+  A754
142+  A754 D1                   POP     DE
143+  A755 E1                   POP     HL
144+  A756 C9                   RET
145+  A757
146+  A757              ; Add vector to database
147+  A757              ; HL = pointer to vector data
148+  A757              add_vector:
149+  A757 E5                   PUSH    HL
150+  A758
151+  A758                      ; Check if database is full
152+  A758 3A 40 A5             LD      A,(vector_count)
zvdb.asm(153): warning: value 0x100 is truncated to 8bit value: 0x00
153+  A75B FE 00                CP      MAX_VECTORS
154+  A75D 30 1B                JR      NC,.db_full
155+  A75F
156+  A75F                      ; Calculate destination address using << 5 (multiply by 32)
157+  A75F                      ; Address = vectors_db + (vector_count << 5)
158+  A75F 6F                   LD      L,A
159+  A760 26 00                LD      H,0
160+  A762                      ; Multiply by 32
161+  A762 29                   ADD     HL,HL          ; *2
162+  A763 29                   ADD     HL,HL          ; *4
163+  A764 29                   ADD     HL,HL          ; *8
164+  A765 29                   ADD     HL,HL          ; *16
165+  A766 29                   ADD     HL,HL          ; *32
166+  A767 11 00 80             LD      DE,vectors_db
167+  A76A 19                   ADD     HL,DE          ; HL = destination address
168+  A76B EB                   EX      DE,HL          ; DE = destination address
169+  A76C
170+  A76C                      ; Copy vector (32 bytes)
171+  A76C E1                   POP     HL             ; Source vector
172+  A76D E5                   PUSH    HL
173+  A76E 01 20 00             LD      BC,VECTOR_BYTES
174+  A771 ED B0                LDIR
175+  A773
176+  A773                      ; Increment vector count
177+  A773 3A 40 A5             LD      A,(vector_count)
178+  A776 3C                   INC     A
179+  A777 32 40 A5             LD      (vector_count),A
180+  A77A
181+  A77A              .db_full:
182+  A77A E1                   POP     HL
183+  A77B C9                   RET
184+  A77C
185+  A77C
186+  A77C              ; Brute force search for nearest vector
187+  A77C              ; HL = query vector
188+  A77C              ; Returns: A = best index, BC = best score
189+  A77C              bf_search:
190+  A77C E5                   PUSH    HL
191+  A77D
192+  A77D                      ; Initialize best score to minimum
193+  A77D 21 00 80             LD      HL,#8000       ; -32768 (worst possible score)
194+  A780 22 41 A5             LD      (best_score),HL
195+  A783 AF                   XOR     A
196+  A784 32 43 A5             LD      (best_index),A
197+  A787
198+  A787                      ; Check each vector
199+  A787 06 00                LD      B,0            ; Vector index
200+  A789              .search_loop:
201+  A789 C5                   PUSH    BC
202+  A78A
203+  A78A                      ; Check if we've searched all vectors
204+  A78A 78                   LD      A,B
205+  A78B 4F                   LD      C,A
206+  A78C 3A 40 A5             LD      A,(vector_count)
207+  A78F B9                   CP      C
208+  A790 28 33                JR      Z,.search_done
209+  A792 38 31                JR      C,.search_done
210+  A794
211+  A794                      ; Calculate vector address using << 5 (multiply by 32)
212+  A794                      ; Address = vectors_db + (index << 5)
213+  A794 79                   LD      A,C            ; A = vector index
214+  A795 6F                   LD      L,A
215+  A796 26 00                LD      H,0
216+  A798                      ; Multiply by 32
217+  A798 29                   ADD     HL,HL          ; *2
218+  A799 29                   ADD     HL,HL          ; *4
219+  A79A 29                   ADD     HL,HL          ; *8
220+  A79B 29                   ADD     HL,HL          ; *16
221+  A79C 29                   ADD     HL,HL          ; *32
222+  A79D 11 00 80             LD      DE,vectors_db
223+  A7A0 19                   ADD     HL,DE          ; HL = vector address
224+  A7A1
225+  A7A1                      ; Calculate dot product
226+  A7A1 C1                   POP     BC
227+  A7A2 D1                   POP     DE             ; Get query vector from stack
228+  A7A3 D5                   PUSH    DE             ; Put it back
229+  A7A4 C5                   PUSH    BC
230+  A7A5 E5                   PUSH    HL             ; Save current vector address
231+  A7A6 EB                   EX      DE,HL          ; HL = query vector
232+  A7A7 CD 30 A7             CALL    dot_product_1bit ; BC = score
233+  A7AA E1                   POP     HL             ; Restore vector address
234+  A7AB
235+  A7AB                      ; Compare with best score
236+  A7AB 2A 41 A5             LD      HL,(best_score)
237+  A7AE B7                   OR      A
238+  A7AF ED 42                SBC     HL,BC
239+  A7B1 30 0D                JR      NC,.not_better
240+  A7B3
241+  A7B3                      ; New best score
242+  A7B3 ED 43 41 A5          LD      (best_score),BC
243+  A7B7 D1                   POP     DE
244+  A7B8 C1                   POP     BC
245+  A7B9 78                   LD      A,B
246+  A7BA 32 43 A5             LD      (best_index),A
247+  A7BD C5                   PUSH    BC
248+  A7BE 18 01                JR      .next_vector
249+  A7C0
250+  A7C0              .not_better:
251+  A7C0 D1                   POP     DE
252+  A7C1              .next_vector:
253+  A7C1 C1                   POP     BC
254+  A7C2 04                   INC     B
255+  A7C3 18 C4                JR      .search_loop
256+  A7C5
257+  A7C5              .search_done:
258+  A7C5 C1                   POP     BC
259+  A7C6 E1                   POP     HL
260+  A7C7 3A 43 A5             LD      A,(best_index)
261+  A7CA ED 4B 41 A5          LD      BC,(best_score)
262+  A7CE C9                   RET
263+  A7CF
264+  A7CF              ; Calculate hash for a vector using hyperplanes
265+  A7CF              ; HL = vector pointer
266+  A7CF              ; Returns: A = 8-bit hash
267+  A7CF              calc_hash:
268+  A7CF E5                   PUSH    HL
269+  A7D0 D5                   PUSH    DE
270+  A7D1 C5                   PUSH    BC
271+  A7D2
272+  A7D2 0E 00                LD      C,0            ; Hash accumulator
273+  A7D4 11 00 A2             LD      DE,hyperplanes
274+  A7D7
275+  A7D7                      ; Process each hyperplane
276+  A7D7 06 08                LD      B,HASH_BITS
277+  A7D9              .hash_loop:
278+  A7D9 C5                   PUSH    BC
279+  A7DA E5                   PUSH    HL
280+  A7DB
281+  A7DB                      ; Calculate dot product with hyperplane
282+  A7DB CD 30 A7             CALL    dot_product_1bit
283+  A7DE
284+  A7DE                      ; Check if positive (BC >= 128)
285+  A7DE 78                   LD      A,B
286+  A7DF B7                   OR      A
287+  A7E0 20 07                JR      NZ,.set_bit    ; High byte non-zero = positive
288+  A7E2 79                   LD      A,C
289+  A7E3 FE 80                CP      128
290+  A7E5 30 02                JR      NC,.set_bit
291+  A7E7
292+  A7E7                      ; Negative - bit stays 0
293+  A7E7 18 08                JR      .next_plane
294+  A7E9
295+  A7E9              .set_bit:
296+  A7E9                      ; Positive - set bit in hash
297+  A7E9 E1                   POP     HL
298+  A7EA C1                   POP     BC
299+  A7EB 79                   LD      A,C
300+  A7EC 37                   SCF                    ; Set carry
301+  A7ED 17                   RLA                    ; Rotate left with carry
302+  A7EE 4F                   LD      C,A
303+  A7EF C5                   PUSH    BC
304+  A7F0 E5                   PUSH    HL
305+  A7F1
306+  A7F1              .next_plane:
307+  A7F1 E1                   POP     HL
308+  A7F2 C1                   POP     BC
309+  A7F3
310+  A7F3                      ; Move to next hyperplane
311+  A7F3 3E 20                LD      A,VECTOR_BYTES
312+  A7F5 83                   ADD     A,E
313+  A7F6 5F                   LD      E,A
314+  A7F7 30 01                JR      NC,.no_carry
315+  A7F9 14                   INC     D
316+  A7FA              .no_carry:
317+  A7FA
318+  A7FA                      ; Shift hash left for next bit
319+  A7FA 79                   LD      A,C
320+  A7FB CB 27                SLA     A
321+  A7FD 4F                   LD      C,A
322+  A7FE
323+  A7FE 10 D9                DJNZ    .hash_loop
324+  A800
325+  A800 79                   LD      A,C            ; Return hash in A
326+  A801 C1                   POP     BC
327+  A802 D1                   POP     DE
328+  A803 E1                   POP     HL
329+  A804 C9                   RET
330+  A805
331+  A805              ; Reindex all vectors (rebuild hash index)
332+  A805              reindex:
333+  A805                      ; Clear hash index
334+  A805 21 00 A0             LD      HL,hash_index
335+  A808 11 01 A0             LD      DE,hash_index+1
336+  A80B 01 FF 01             LD      BC,256*2-1
337+  A80E 36 00                LD      (HL),0
338+  A810 ED B0                LDIR
339+  A812
340+  A812                      ; Process each vector
341+  A812 0E 00                LD      C,0            ; Vector counter
342+  A814              .reindex_loop:
343+  A814                      ; Check if done
344+  A814 3A 40 A5             LD      A,(vector_count)
345+  A817 B9                   CP      C
346+  A818 C8                   RET     Z              ; Done if C == vector_count
347+  A819 D8                   RET     C              ; Done if C > vector_count
348+  A81A
349+  A81A                      ; Calculate vector address using << 5 (multiply by 32)
350+  A81A                      ; Address = vectors_db + (C << 5)
351+  A81A 69                   LD      L,C
352+  A81B 26 00                LD      H,0
353+  A81D                      ; Multiply by 32
354+  A81D 29                   ADD     HL,HL          ; *2
355+  A81E 29                   ADD     HL,HL          ; *4
356+  A81F 29                   ADD     HL,HL          ; *8
357+  A820 29                   ADD     HL,HL          ; *16
358+  A821 29                   ADD     HL,HL          ; *32
359+  A822 11 00 80             LD      DE,vectors_db
360+  A825 19                   ADD     HL,DE          ; HL = vector address
361+  A826
362+  A826                      ; Calculate hash
363+  A826 C5                   PUSH    BC
364+  A827 CD CF A7             CALL    calc_hash      ; A = hash
365+  A82A C1                   POP     BC
366+  A82B
367+  A82B                      ; Add to hash bucket (simplified - just store first match)
368+  A82B 6F                   LD      L,A
369+  A82C 26 00                LD      H,0
370+  A82E 29                   ADD     HL,HL          ; *2 for 16-bit entries
371+  A82F 11 00 A0             LD      DE,hash_index
372+  A832 19                   ADD     HL,DE
373+  A833
374+  A833                      ; Store vector index if bucket empty
375+  A833 7E                   LD      A,(HL)
376+  A834 23                   INC     HL
377+  A835 B6                   OR      (HL)
378+  A836 20 05                JR      NZ,.bucket_full
379+  A838
380+  A838 2B                   DEC     HL
381+  A839 71                   LD      (HL),C         ; Store index low
382+  A83A 23                   INC     HL
383+  A83B 36 00                LD      (HL),0         ; Store index high (always 0 since max 256 vectors)
384+  A83D
385+  A83D              .bucket_full:
386+  A83D 0C                   INC     C
387+  A83E 18 D4                JR      .reindex_loop
388+  A840
389+  A840                      END     main
# file closed: zvdb.asm
# file closed: test_compact.asm
